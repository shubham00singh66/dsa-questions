class Solution {
// public:
//     vector<int> twoSum(vector<int>& nums, int target) {
//        for(int i=0;i<nums.size();i++)
//        {
//            for(int j=i+1;j<nums.size();j++)
//            {
//                if(nums[i] + nums[j] ==target)
//                    return {i,j};
//            }
//        }
//         return {};
//     }
// };
// time complexity = O(N^2)
    
    class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     
        vector<int>ans;
        unordered_map<int,int>mapp;
        
        for(int i=0;i<nums.size();i++)
        {
            if(mapp.find(target - nums[i]) != mapp.end())
            {
                ans.push_back(mapp[target - nums[i]]);
                ans.push_back(i);
            }
            mapp[nums[i]] = i;
        }
        return ans;
    }
};

time complexity = O(N)
linear iteration
as we traversing the whole array



space complexity = O(N)
storing all the elements in the hash table
